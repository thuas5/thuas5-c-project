1、C程序结构
#include <stdio.h>
int main()
{
  //1、变量定义
  //2、输入
  //3、处理：计算、判定、循环操作
  //4、输出
}
2、变量，内存中一块有名字的单元，用于存储输入数据、CPU处理完后的数据、循环变量（常量）
整型       浮点型          字符型     字符串
23,-100   3.14,1.4e5       'A','9'    "china"
int       float  double    char        char[]
%d        %f       %lf       %c          %s

变量定义格式：数据类型  变量名;
合法标识符：以字母或下划线开头，只能包含字母、数字和下划线的字符序列，可以用来给变量、常量、函数命名

3、输入/输出函数
格式输入函数scanf
scanf("格式控制串",地址列表);
格式控制串：(1)以%开头的格式控制符，不同类型数据，输入格式不同
            (2)普通字符：原样输入，一般情况下不写
地址列表：以&开头的变量地址，可以多个，前面有多少个%格式控制符，后面对应有多少个变量地址
如：scanf("%d,%f",&a,&b);
输入：12,3.45回车

单个字符输入函数getchar
char c ;
c = getchar();

格式输出函数printf
printf("格式控制串",变量列表);
格式控制串：(1)以%开头的格式控制符，不同类型数据，输出格式不同
            (2)普通字符：原样输出
变量列表：可以多个变量，前面有多少个%格式控制符，后面对应有多少个变量，如果没有格式控制符只有普通字符输出，变量列表可以省略
如：printf("请输入一个整数:");
    printf("sum = %.2lf,avg = %.2lf\n",sum,avg);

单个字符输出函数putchar
putchar(c);

4、运算符和表达式
算术：+ - * / % ++ --  
      /(除取商)两边的操作数都是整数，结果为整
      %(除取余)两边的操作数必须都是整数
关系：> >= < <= == !=
逻辑：! &&(并且) ||(或者)
赋值：= += -= *= /= %=  将右边的值赋给左边的变量
      a = 10;  b = a * 3 + 45;
      a += 2; ==> a = a + 2

5、判定逻辑（如果，判断等）：使用选择语句来实现
条件运算符和表达式,用来实现两分支选择逻辑
格式：表达式1?表达式2:表达式3;
表达式1一般判定条件(由关系运算符或逻辑运算符组成的式子，结果只有真1或假0)

if语句:80%
if(条件)
{
}

if(条件)
{
}else
{
}

if(条件1)
{
}else if(条件2)
{
}else
{
}

switch语句：多分支开关语句，用来实现多分支的选择逻辑，一般菜单操作、单个字符输入判定操作，表达式的取值可以列
switch(表达式)//表达式一般是输入变量，类型只能整型、字符型或枚举类型
{
  case 常量值1:语句组1;break;
  case 常量值2:语句组2;break;
  ...
  case 常量值n:语句组n;break;
  default:语句组n+1;
}

6、循环：重复操作或迭代操作逻辑

循环变量：i,j,k...等，必须是int

符号位变量：f，必须是int，初值根据第一个数正负来确定，如果是正数，f = 1;否则f = -1;
            核心语句：f * num; f = -f;    

计数器：int变量count,使用之前清0，即count = 0;
        核心语句：count ++;

累加器：变量sum,使用之前清0，即sum = 0;
        核心语句：sum = sum + num;(sum += num;)

累乘器：变量s,使用之前清1，即s = 1;
        核心语句：s = s * num;(s *= num;)





while(循环条件)
{
  循环体语句;
}

do
{
  循环体语句;
}while(循环条件);

for(变量赋初值;循环条件;变量的增值或减值)
{
  循环体语句;
}
while、do-while和for循环语句一般情况下可以互换，
while和do-while区别：当初始条件为假时，while的循环体一次也不执行，do-while会执行一次

for循环：当循环变量取值范围确定或循环次数确定，90%
while循环：循环次数不确定
do-while循环：循环次数不确定，而且循环条件与输入操作有关


已知循环结束的条件，循环条件：!(循环结束条件)

循环N次
for(i = 0; i < N; i ++)
{
}
for(i = 1; i <= N; i ++)
{
}
100~500
for(num = 100; num <= 500; num++)
{
}

循环流程控制语句

break语句：与if配合使用，当条件为真时，结束当前循环，程序执行流程继续执行循环体外的后续语句。一般只给出循环结束条件时，可以使用while循环，设置循环条件为1，在循环体中，使用if+break来控制循环结束。

continue语句：与if配合使用，当条件为真时，结束本次循环，程序执行流程不执行continue后续语句，继续执行下一次的循环。


7、数组
构造的数据类型（由基本数据类型int float double char构造而成）,使用一块连续内存单元来存储多个相同类型数据，这块内存单元首地址存储在数组中，每一小块内存单元都有名字，即数组元素（数组名[下标]），下标从0开始，与一般变量使用方法一样，按名存取。其中数组名存储是这块连续单元的首地址，是地址常量。
优点：1、定义时比较简单
      2、可以使用循环来输入、输出、处理操作
定义格式：数据类型  数组名[大小];
int a[6];
在内存开辟一块连续的内存单元，数组名叫做a，有6小块，每一块有名字（a[0]~a[5]）,都可以存储一个整型数据

数组一旦定义好后，它的输入、输出、处理都与循环有关
一维数组与一重循环（for循环）有关，循环变量i用于控制数组的下标，一维数组中某个元素表示：a[i]
#define N 4
输入数组元素
for(i = 0 ; i < N; i ++)
{
  	scanf("%d" , &a[i]);
}
输出数组元素
for(i = 0 ; i < N; i ++)
{
  	printf("%-4d" , a[i]);
}
二维数组与二重循环（for循环）有关，循环变量i和j分别用于控制二维数组的行和列的下标（0~M-1、0~N - 1），二维数组中某个元素表示：a[i][j]
#define M 4
#define N 4
输入数组元素
for(i = 0 ; i < M; i ++)
{
   for(j = 0; j < N; j ++)
   {
  	scanf("%d" , &a[i][j]);
   }
}
输出数组元素
for(i = 0 ; i < M; i ++)
{
   for(j = 0; j < N; j ++)
   {
  	printf("%-4d" , a[i][j]);
   }
   putchar('\n');
}
  	

使用字符数组来存储字符串
定义：char 数组名[N];//数组大小定义时尽量设置大一点，用于存储一个字符串
      char 数组名[M][N];//用于存储M个字符串
初始化操作与int,float,double数组一样，可以部分赋值（未赋值的元素，自动赋'\0'）或全部赋值
还可以字符串方式(注意：赋值时，包括字符串结束符'\0')赋值
char ch[10] = {'H','e','l','l'};
char ch[10] = "Hello";

字符串的输入/输出有三种方式
1、以%c格式进行单个字符格式输入/输出，必须与for循环配合使用，循环变量用于控制数组的下标
   缺点：循环次数确定，输入字符个数是固定，必须输入/输出N个字符，字符可以包括回车符和空格
for(i = 0 ; i < N; i ++)
  {
	  scanf("%c" , &str1[i]);
  }
2、以%s格式进行字符串格式输入/输出，不需要循环
   缺点：输入时，遇到空格或回车符，终止字符串的输入
scanf("%s" , str2);//str2是数组名，表示数组首地址
printf("%s" , str2);
3、使用gets和puts两个系统函数来实现字符串输入和输出（推荐使用）
gets(str3);//str3是数组名
puts(str3);


字符串的常用函数，使用之前，预处理命令包含这些函数定义所在的头文件
#include <string.h>
1、strcat两个字符串的连接
2、strcpy将字符串赋值给字符数组
3、strcmp比较两个字符串大小，如果串1大于串2，返回正数，如果串1小于串2，返回负数，如果串1等于串2，返回0
4、strlen获取字符数组实际字符个数，包括字符串中的空格，但不包括'\0'


常用算法：
求一个正整数num上各个位上的数字n
循环实现，先将这个数使用%除10取余，得到个位上的数，再将这个数使用/除10取商，将它缩小10，当这个数等于0时结束循环
while(num != 0)
{
  n = num % 10;
  num = num / 10;
}



求N个数组元素中的最大值或最小值
先假定数组中的一个元素是最大值max或最小值min
for循环实现，将数组中所有元素一个一个与最大值或最小值比较，如果比最大值还大，这个元素赋值给最大值（比最小值还小，将这个数赋值给最小值）
max = min = a[0];
for(i = 0; i < N; i ++)
{
   
   if(a[i] > max)
   {
      max = a[i];
   }else if(a[i] < min)
   {
      min = a[i];
   }
}


N个数的冒泡排序
需要N-1趟冒泡排序
每一趟需要两两比较的次数:N - 1 - i次
使用两重循环来实现
外循环用来控制趟数：N - 1趟，即循环N - 1次，用循环变量i来表示
内循环用来控制每一趟两两比较的次数：N - 1 - i次，即循环N - 1 - i次，用循环变量j来表示
内循环循环体：两两比较，即数组中一个元素(a[j])与后一个元素(a[j + 1])比较，如果是升序，判定是否大于操作，如果是降序，判定是否小于操作，如果条件为真，就交换这两个数（三条语句实现）
for(i = 0; i < N - 1; i ++)
  {
  	for(j = 0 ; j < N - 1 - i; j ++)
  	{
  		if(a[j] < a[j + 1])
  		{
  			temp = a[j];
		  	a[j] = a[j + 1];
		  	a[j + 1] = temp;
		}
	}
  }

N个数的简单的选择排序
需要N-1趟选择排序，循环N - 1次，用外循环来实现，用循环变量i来表示
每一趟：
1、变量k用于存储第i趟的待排元素中第1个元素的下标，即k = i
2、用变量j表示第i趟的剩余元素所有的下标：i + 1 ~ N - 1，使用内循环来实现
   通过内循环不断将下标为k的数组元素与下标为j数组元素进行比较，如果大于（升序）或小于（降序），将j的值赋值给k，即j和k指的同一个数组元素
   找到待排元素中最小值或最大值（下标为k的元素）
3、将最小值或最大值（下标为k的元素）与待排元素中第一个元素（下标为i的元素）进行交换
for(i = 0 ; i < N - 1; i ++)
  {
  	k = i;
  	for(j = i + 1 ;j < N;j ++)
  	{
  		if(a[k] > a[j])
  		{
  		   k = j;//将待排元素中的最小数组元素的下标赋给k 
		}
	}
	//a[k]和a[i]元素值进行交换
	temp = a[i];
	a[i] = a[k];
	a[k] = temp;
  }